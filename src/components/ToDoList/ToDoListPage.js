import { Grid, TextField, Typography, Container, ThemeProvider, CssBaseline, createTheme, Button, List, ListItem, ListItemText, Paper, IconButton } from "@mui/material";
import React, { useState } from "react";
import ReactDOM from 'react-dom';
import DeleteIcon from '@mui/icons-material/Delete';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import CheckIcon from '@mui/icons-material/Check';
import EditIcon from '@mui/icons-material/Edit';
import SaveIcon from '@mui/icons-material/Save';


const theme = createTheme();  //Generates a theme object based on Material-UI's default settings or customized options
//customize the theme in { ....palette: , typography: } by passing an object with specific properties (e.g., colors, typography)

export const ToDoListPage = () => {

    const [state, setState] = useState({
        list: "",
        date: new Date(),
        items: []
    });


    const handleChange = (event) => {           //function is intended to handle changes in form inputs. & takes a single parameter event, which is the event object generated by the form input element when its value changes.
        const { name, value } = event.target;   //line uses object destructuring to extract the name and value properties from event.target
                                                //event.target: Refers to the DOM element (usually an input) that triggered the event.

        setState({                              //updates the component's state with the new input value.

            ...state,
            [name]: value,
        });
    };

    const handleAddItem = () => {
        if (state.list.trim() !== "") {
            setState({
            list: "",                          //resets the list field in the state to an empty string, clearing the input field after an item is added.
            date: new Date(),                  //updates the date field in the state with the current date
            items: [...state.items, { text: state.list, date: state.date, done: false, editable: false, saved: false }]    //Adds a new item to the items array with properties text, date, done, editable, and saved.
            });
        };
    };

    const handleDeleteItem = (index) => {
        const newItems = state.items.filter((item, i) => i !== index); // creates a new array newItems by filtering out the item at the specified index.
        //state.items: Refers to the current array of items in the component's state.
        //filter Method: The filter method creates a new array with all elements that pass the test implemented by the provided Callback Function: `(item, i) => i !== index`.
        setState({
            ...state,
            items: newItems         //Sets the items property of the state to the newly created newItems array, which no longer includes the deleted item
        });
    };
    
    const handleKeyPress = (event) => {   //intended to handle keypress events & takes a single parameter event, which is the event object generated by the keypress event
        if (event.key === 'Enter') {      //checks if the key that was pressed is the "Enter" key &  Represents the key value of the key that was pressed. The value is 'Enter' if the "Enter" key was pressed.
            handleAddItem();              //adds the current value of the input field to the list of items in the state and then clears the input field.
        };
    };

    const handleDateChange = (newDate) =>{      //intended to handle changes to a date value & takes a single parameter newDate, which represents the new date value that will be set in the component's state.
        setState({
            ...state,
            date: newDate,          //updates the date field in the state with the new date value
        });
    };

    const handleToggleDone = (index) => {
        const newItems = state.items.map((item, i) => {
            if (i === index) {
                return { ...item, done:!item.done, editable: false };
            }
            return item;
        });
        setState({
            ...state,
            items: newItems
        });
    };

    const handleEditItem = (index) => {        //intended to toggle the editable state of a specific item in the items array. & takes a single parameter index, which represents the index of the item to be edited.
        const newItems = state.items.map((item, i) => {   //uses the map method to create a new array newItems by iterating over each item in the state.items array. & `state.items` : Refers to the current array of items in the component's state
            //`map` Method: Creates a new array with the results of calling a provided function on every element in the calling array.
            if (i === index && !item.done && !item.saved) {   //checks if the current item (item) is at the specified index (i === index) and if the item is not marked as done and not saved.
                
                return { ...item, editable: !item.editable };     //If the conditions are met, this line returns a new object with all properties of the current item (...item) but with the editable property toggled
            }
            return item;
        });
        setState({
            ...state,
            items: newItems    //sets the items property of the state to the newly created newItems array, which includes the updated item with the toggled editable state.

        });
    };  //?????

    const handleSaveItem = (index, newText) => {
        const newItems = state.items.map((item, i) => {
            if (i === index) {
                return { ...item, text: newText, editable: false, saved: true };
            }
            return item;
        });
        setState({
            ...state,
            items: newItems
        });
    };

    const handleEditChange = (event, index) => {
        const { value } = event.target;
        const newItems = state.items.map((item, i) => {
            if (i === index ) {
                return { ...item, text: value };
            }
            return item;
        });
        setState({
            ...state,
            items: newItems
        });
    };
    
    return (
        <Container>
            <Typography 
                gutterBottom 
                variant="h2" 
                sx={{ fontFamily: 'Pacifico, cursive' }}
            >
                To Do List
            </Typography>
                        
                        
            <Grid item xs={12} sx={{ mt: 2 }}>
            <Button 
            variant="contained" 
            color="success" 
            onClick={handleAddItem}
            sx={{ mt: 2, mb: 2, ml: 1, mr: 1 }} // Top, Bottom, Left, Right margin
            >
            Add List
            </Button>
            </Grid>


            <Grid container spacing={2}>
                <Grid item xs={12}>
                    <TextField 
                        id="list" 
                        name="list" 
                        label="Add a list" 
                        variant="outlined" 
                        value={state.list} 
                        onChange={handleChange} 
                        onKeyDown={handleKeyPress} 
                        type="text" 
                        fullWidth
  
                    />
                <Grid item xs={12} sx={{ mt: 2 }}>
                    <LocalizationProvider dateAdapter={AdapterDateFns}>
                        <DatePicker
                            label="Select Date"
                            value={state.date}
                            onChange={handleDateChange}
                            renderInput={(params) => <TextField {...params} fullWidth />}
                        />
                    </LocalizationProvider>
                </Grid>

            <Grid item xs={12} >
                <List>
                    {state.items.map((item, index) => (      //state.items.map: This loops over the items array from the component's state.
                        <ListItem key={index} style={{ display: 'flex', alignItems: 'center' , textDecoration: item.done ? 'line-through' : 'none' }}>    {/*<ListItem>: Represents a single item in the list */}
                        <Paper variant="outlined" style={{ width: '100%', padding: '10px', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                                <Typography variant="body1" style={{ marginRight: '10px' }}>
                                    {index + 1}.
                                </Typography>
                                {item.editable ? (
                                    <TextField
                                        value={item.text}
                                        onChange={(e) => handleEditChange(e, index)}
                                        fullWidth
                                    />
                                ) : (
                                    <ListItemText primary={item.text} secondary={item.date.toLocaleDateString()} />
                                )}
                                <div>
                                {!item.saved && item.editable ? (
                                        <IconButton edge="end" color="primary" onClick={() => handleSaveItem(index, item.text)}>
                                            <SaveIcon />
                                        </IconButton>
                                        
                                    ) : (
                                        <IconButton edge="end" color="primary" onClick={() => handleEditItem(index)}>
                                            <EditIcon />
                                        </IconButton>
                                    )}
                                    <IconButton edge="end" color="primary" onClick={() => handleToggleDone(index)}>
                                        <CheckIcon />
                                    </IconButton>
                                    <IconButton edge="end" color="secondary" onClick={() => handleDeleteItem(index)}>
                                        <DeleteIcon />
                                    </IconButton>
                                </div> 
                            </Paper>
                        </ListItem>
                    ))}
                </List>
            </Grid>   
            </Grid>
            </Grid>
        </Container>
    );

};

ReactDOM.render(
    <ThemeProvider theme={theme}> 
        <CssBaseline />  
        <ToDoListPage />
    </ThemeProvider>, //ThemeProvider:This component makes the theme available to all components in your application.
                        //CssBaseline: This component is used to kickstart an elegant, consistent, and simple baseline to build upon.


    document.getElementById('root')
);

export default ToDoListPage;



/*Callback Function: `(item, i) => i !== index`

item: Represents the current item being processed in the array.
i: Represents the index of the current item being processed.
Condition: i !== index ensures that the item at the specified index is excluded from the new array. All other items are included.
*/

/*
`if (i === index && !item.done && !item.saved) {`
Conditions:
i === index: Ensures the item being processed is the one at the specified index.
!item.done: Ensures the item is not marked as done.
!item.saved: Ensures the item is not marked as saved.

*/
